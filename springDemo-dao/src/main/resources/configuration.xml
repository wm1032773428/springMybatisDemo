<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：-->
    <!--在 properties 元素体内指定的属性首先被读取。-->
    <!--然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。-->
    <!--最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);-->
    <properties resource="config.properties">
        <property name="username" value="root"/>
        <property name="password" value="123456"/>

        <!--从MyBatis 3.4.2开始，你可以为占位符指定一个默认值,如${username:ut_user}-->
        <!--这个特性默认是关闭的。如果你想为占位符指定一个默认值， 你应该添加一个指定的属性来开启这个特性。如下：-->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!--通过增加一个指定的属性来改变分隔键和默认值的字符，如下：-->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
    </properties>


    <settings>
        <setting name="cacheEnabled" value="false"/>
        <!--<setting name="lazyLoadingEnabled" value="true"/>-->
        <!--<setting name="multipleResultSetsEnabled" value="true"/>-->
        <!--<setting name="useColumnLabel" value="true"/>-->
        <!--<setting name="useGeneratedKeys" value="false"/>-->
        <!--<setting name="autoMappingBehavior" value="PARTIAL"/>-->
        <!--<setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>-->
        <!--<setting name="defaultExecutorType" value="SIMPLE"/>-->
        <!--<setting name="defaultStatementTimeout" value="25"/>-->
        <!--<setting name="defaultFetchSize" value="100"/>-->
        <!--<setting name="safeRowBoundsEnabled" value="false"/>-->
        <!--<setting name="mapUnderscoreToCamelCase" value="false"/>-->
        <!--<setting name="localCacheScope" value="SESSION"/>-->
        <!--<setting name="jdbcTypeForNull" value="OTHER"/>-->
        <!--<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>-->
    </settings>

    <!--类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如:-->
    <typeAliases>
        <!--<typeAlias alias="Author" type="domain.blog.Author"/>-->
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:-->
        <!--每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；-->
        <!--若有注解，则别名为其注解值。看下面的例子-->
        <!--@Alias("author")-->
        <!--public class Author {}-->
        <package name="com.gold.dream"/>
    </typeAliases>

    <typeHandlers>
        <typeHandler handler="com.gold.dream.typeHandler.DateTypeHandler"/>
        <!--可以让 MyBatis 为你查找类型处理器：-->
        <!--<package name="com.gold.dream.typeHandler"/>-->
    </typeHandlers>


    <!--MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，
    要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。-->
    <objectFactory type="com.gold.dream.factory.MyObjectFactory">
        <!--传入参数构造返回对象的时候用-->
        <property name="someProperty" value="100"/>
    </objectFactory>

    <plugins>
        <plugin interceptor="com.gold.dream.plugin.LogPlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>

    <environments default="test">

        <!--自定义数据源-->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="com.gold.dream.dataSourceFactory.Dbcp2DataSourceFactory">
                <property name="driverClassName" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username?:root}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>


        <environment id="development">
            <!--在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：-->
            <!--JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。-->
            <!--MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
            默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:-->
            <!--<transactionManager type="MANAGED">-->
                <!--<property name="closeConnection" value="false"/>-->
            <!--</transactionManager>-->
            <!--如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。-->
            <transactionManager type="JDBC">

            </transactionManager>

            <!--有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：-->
            <!--UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：-->
            <!--driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。-->
            <!--url – 这是数据库的 JDBC URL 地址。-->
            <!--username – 登录数据库的用户名。-->
            <!--password – 登录数据库的密码。-->
            <!--defaultTransactionIsolationLevel – 默认的连接事务隔离级别。-->
            <dataSource type="UNPOOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username?:root}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>

        <environment id="prd">
            <transactionManager type="JDBC"/>

            <!--POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。-->

            <!--除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：-->

            <!--poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10-->
            <!--poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。-->
            <!--poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）-->
            <!--poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。-->
            <!--poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程. 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3 (新增于 3.4.5)-->
            <!--poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。-->
            <!--poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。-->
            <!--poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username?:root}"/>
                <property name="password" value="${password}"/>

                <property name="poolMaximumActiveConnections" value="20" />
                <property name="poolMaximumIdleConnections" value="10" />
                <property name="poolMaximumCheckoutTime" value="15" />
                <property name="poolTimeToWait" value="10" />
                <property name="poolPingQuery" value="select 1 from dual" />
                <property name="poolPingEnabled" value="true" />
                <property name="poolPingConnectionsNotUsedFor" value="0" />
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="mapper/BlogMapper.xml"/>
        <mapper class="com.gold.dream.dao.AuthorMapper"/>
        <!--<package name="com.gold.dream"/>-->

    </mappers>

</configuration>